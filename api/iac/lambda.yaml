AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function for east-west communication with other VPC Lattice services
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:38'
    MemorySize: !Ref pFnMemory
    Runtime: python3.11
    Timeout: !Ref pFnTimeout
Parameters:
  pApiStage:
    Type: String
  pUserPoolId:
    Type: String
  pFnMemory:
    Type: Number
  pFnTimeout:
    Type: Number
  pServiceEndpoint:
    Type: String
  pServiceArns:
    Type: List<String>
  pVpcId:
    Type: String
  pSubnetIds:
    Type: List<String>
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml
      StageName: !Ref pApiStage
      TracingEnabled: true
      EndpointConfiguration:
        Type: REGIONAL
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/lattice-api-${Api}"
      RetentionInDays: 7
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: xray
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: '*'
        - PolicyName: ec2-v2n
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource: '*'
        - PolicyName: vpc-lattice
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - vpc-lattice-svcs:Invoke
                Resource: "*"
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/client
      Handler: fn.handler
      Layers:
        - !Ref Layer
      Role: !GetAtt FnRole.Arn
      Tracing: Active
      VpcConfig:
        SecurityGroupIds: [ !Ref FnSGroup ]
        SubnetIds: !Ref pSubnetIds
      Environment:
        Variables:
          LATTICE_SERVICE_ENDPOINT: !Ref pServiceEndpoint
  FnSGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "VPC Lattice client function"
      VpcId: !Ref pVpcId
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Fn}"
      RetentionInDays: 7
  FnPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Fn.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  # Layers
  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.10
        - python3.11
      ContentUri: ../tmp/layer
      LayerName: python3-client
Outputs:
  outApi:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com"
  outFn:
    Value: !Ref Fn
  outLayer:
    Value: !Ref Layer